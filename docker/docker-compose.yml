services:
    # Proxy server
    nginx:
        build:
            context: .
            dockerfile: nginx/Dockerfile
        ports:
            - ${NGINX_PORT}:80
        volumes:
            - ./nginx/config:/etc/nginx # Nginx configuration
            - ./nginx/log/:/var/log/nginx/ # Nginx log folder
            - ./nginx/html:/var/www/html # Static pages
        command: /tmp/run_nginx.sh # Create nginx config file from config template
        environment:
            - DOLLAR=$$
        env_file:
            - ./.env
        depends_on:
            - auth_server
            - task_server
        restart: always

    # Database
    postgresql:
        build:
            context: .
            dockerfile: postgresql/Dockerfile
        expose:
            - "5432"
        ports:
            - ${POSTGRES_PUBLIC_PORT}:5432
        volumes:
            - ./postgresql/data:/var/lib/postgresql/data
        environment:
            - POSTGRES_HOST_AUTH_METHOD=trust
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        restart: always

    pgadmin4:
        image: dpage/pgadmin4
        environment:
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
        ports:
            - ${PGADMIN_DEFAULT_PORT}:80
        volumes:
            - ./postgresql/pgadmin:/var/lib/pgadmin
        restart: always

    # Migrations
    alembic:
        build:
            context: ../
            dockerfile: docker/alembic/Dockerfile
        volumes:
            - ../migration/alembic:/alembic
            - ../migration/alembic.ini:/alembic.ini
        environment:
            - POSTGRES_HOST=postgresql
            - POSTGRES_PORT=5432
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        depends_on:
            - postgresql
        command: tail -F anything
        restart: always

    # Server
    auth_server:
        build:
            context: ../
            dockerfile: docker/fastapi/auth/Dockerfile
        expose:
            - ${AUTH_SERVER_PORT}
        volumes:
            - ../src/auth:/src/auth # Source code
            - ../environment/auth.env:/environment/auth.env
        command: bash -c "cd src
            && uvicorn auth.main:app --host 0.0.0.0 --port ${AUTH_SERVER_PORT} --reload"
        depends_on:
            - postgresql
        restart: always

    task_server:
        build:
            context: ../
            dockerfile: docker/fastapi/task/Dockerfile
        expose:
            - ${TASK_SERVER_PORT}
        volumes:
            - ../src/task:/src/task # Source code
        command: bash -c "cd src
            && uvicorn task.main:app --host 0.0.0.0 --port ${TASK_SERVER_PORT} --reload"
        depends_on:
            - postgresql
        restart: always

networks:
    default:
        external: true
        name: ${COMPOSE_PROJECT_NAME}_network
